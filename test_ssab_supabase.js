// üè≠ SSAB Oxel√∂sund Supabase Test
// Test-fil f√∂r att verifiera SSAB Oxel√∂sund skiftsystem i Supabase

import { createClient } from "@supabase/supabase-js";

// Supabase konfiguration f√∂r SSAB Oxel√∂sund
const supabase = createClient(
  "https://fsefeherdbtsddqimjco.supabase.co",
  "DIN-ANON-KEY-H√ÑR" // Ers√§tt med din riktiga anon key
);

// Test-funktioner f√∂r SSAB Oxel√∂sund systemet
async function testSSABOxelosundSystem() {
  console.log("üè≠ Testar SSAB Oxel√∂sund skiftsystem...");

  try {
    // 1. Testa att h√§mta SSAB Oxel√∂sund teams
    console.log("\n1. H√§mtar SSAB Oxel√∂sund teams...");
    const { data: teams, error: teamsError } = await supabase
      .from("shift_teams")
      .select("*")
      .eq("company_id", (await supabase.from("companies").select("id").eq("name", "SSAB OXEL√ñSUND").single()).data?.id);

    if (teamsError) {
      console.error("‚ùå Fel vid h√§mtning av teams:", teamsError);
    } else {
      console.log("‚úÖ Teams hittade:", teams?.length || 0);
      teams?.forEach(team => {
        console.log(`   - ${team.name} (${team.color_hex})`);
      });
    }

    // 2. Testa att h√§mta skift f√∂r Lag 31
    console.log("\n2. H√§mtar skift f√∂r Lag 31...");
    const { data: shifts, error: shiftsError } = await supabase
      .from("shifts")
      .select(`
        *,
        shift_teams!inner(name, color_hex),
        companies!inner(name)
      `)
      .eq("shift_teams.name", "Lag 31")
      .gte("start_time", "2025-01-01")
      .lte("start_time", "2025-01-31")
      .order("start_time");

    if (shiftsError) {
      console.error("‚ùå Fel vid h√§mtning av skift:", shiftsError);
    } else {
      console.log("‚úÖ Skift hittade f√∂r Lag 31:", shifts?.length || 0);
      shifts?.slice(0, 5).forEach(shift => {
        console.log(`   - ${shift.title} (${shift.shift_type}) - ${new Date(shift.start_time).toLocaleDateString()}`);
      });
    }

    // 3. Testa RPC funktion f√∂r SSAB Oxel√∂sund
    console.log("\n3. Testar SSAB Oxel√∂sund RPC funktion...");
    const { data: rpcData, error: rpcError } = await supabase
      .rpc("get_ssab_oxelosund_shifts", {
        p_start_date: "2025-01-01",
        p_end_date: "2025-01-31",
        p_team_filter: "Lag 31"
      });

    if (rpcError) {
      console.error("‚ùå Fel vid RPC anrop:", rpcError);
    } else {
      console.log("‚úÖ RPC data hittad:", rpcData?.length || 0);
    }

    // 4. Testa statistik f√∂r SSAB Oxel√∂sund
    console.log("\n4. H√§mtar SSAB Oxel√∂sund statistik...");
    const { data: stats, error: statsError } = await supabase
      .rpc("get_ssab_oxelosund_stats", {
        p_start_date: "2025-01-01",
        p_end_date: "2025-01-31"
      });

    if (statsError) {
      console.error("‚ùå Fel vid h√§mtning av statistik:", statsError);
    } else {
      console.log("‚úÖ Statistik hittad f√∂r teams:", stats?.length || 0);
      stats?.forEach(stat => {
        console.log(`   - ${stat.team_name}: ${stat.total_shifts} skift, ${stat.total_hours}h`);
      });
    }

    // 5. Validera SSAB Oxel√∂sund regler
    console.log("\n5. Validerar SSAB Oxel√∂sund regler...");
    const { data: validation, error: validationError } = await supabase
      .rpc("validate_ssab_oxelosund_rules", {
        p_start_date: "2023-01-01",
        p_end_date: "2025-12-31"
      });

    if (validationError) {
      console.error("‚ùå Fel vid validering:", validationError);
    } else {
      console.log("‚úÖ Validering slutf√∂rd:");
      validation?.forEach(rule => {
        console.log(`   - ${rule.validation_rule}: ${rule.status} - ${rule.details}`);
      });
    }

  } catch (error) {
    console.error("‚ùå Allm√§nt fel:", error);
  }
}

// Exempel p√• specifika queries f√∂r SSAB Oxel√∂sund
async function getSSABShiftsExamples() {
  console.log("\nüìã Exempel p√• SSAB Oxel√∂sund queries:");

  // Exempel 1: H√§mta skift f√∂r specifikt lag och datum
  console.log("\n1. Skift f√∂r Lag 31 den 12 januari 2026:");
  const { data: specificShift, error: specificError } = await supabase
    .from("shifts")
    .select(`
      *,
      shift_teams!inner(name, color_hex)
    `)
    .eq("shift_teams.name", "Lag 31")
    .eq("start_time", "2026-01-12T00:00:00");

  if (specificError) {
    console.error("   ‚ùå Fel:", specificError);
  } else {
    console.log("   ‚úÖ Skift:", specificShift?.[0]?.title || "Inget skift");
  }

  // Exempel 2: H√§mta alla skift f√∂r en vecka
  console.log("\n2. Alla skift f√∂r vecka 1, 2025:");
  const { data: weekShifts, error: weekError } = await supabase
    .from("shifts")
    .select(`
      *,
      shift_teams!inner(name, color_hex)
    `)
    .gte("start_time", "2025-01-06")
    .lte("start_time", "2025-01-12")
    .order("start_time");

  if (weekError) {
    console.error("   ‚ùå Fel:", weekError);
  } else {
    console.log("   ‚úÖ Skift denna vecka:", weekShifts?.length || 0);
  }

  // Exempel 3: H√§mta n√§sta skift f√∂r anv√§ndare
  console.log("\n3. N√§sta skift f√∂r anv√§ndare:");
  const { data: nextShift, error: nextError } = await supabase
    .rpc("get_next_shift", {
      p_user_id: "user-uuid-here" // Ers√§tt med riktig user ID
    });

  if (nextError) {
    console.error("   ‚ùå Fel:", nextError);
  } else {
    console.log("   ‚úÖ N√§sta skift:", nextShift?.title || "Inget skift");
  }
}

// K√∂r tester
async function runTests() {
  console.log("üöÄ Startar SSAB Oxel√∂sund Supabase tester...\n");
  
  await testSSABOxelosundSystem();
  await getSSABShiftsExamples();
  
  console.log("\n‚úÖ Alla tester slutf√∂rda!");
}

// Exportera f√∂r anv√§ndning
export { getSSABShiftsExamples, runTests, testSSABOxelosundSystem };

// K√∂r om detta √§r huvudfilen
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests();
} 